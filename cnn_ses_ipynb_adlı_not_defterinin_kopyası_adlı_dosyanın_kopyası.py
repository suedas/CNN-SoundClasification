# -*- coding: utf-8 -*-
"""CNN_Ses.ipynb adlı not defterinin kopyası adlı dosyanın kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kd1x67WW-StYG0AedpPZ4LSdhMfGEmH7
"""

# versiyon kontroleri
import tensorflow as tf
print(tf.__version__)

# kodumuz için gerekli olan kütüphaneleri çağırıyoruz
import matplotlib.pyplot as plt
import pandas as pd
import os
import librosa
import numpy as np

from tqdm import tqdm

# makine öğrenmesi gerçekleştirmek için komutları çekiyoruz
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten
from tensorflow.keras.optimizers import Adam

from sklearn import metrics
from tensorflow.keras.callbacks import ModelCheckpoint
from datetime import datetime

# Dataseti Drive den çekmek için oluşturulan kod satırı
from google.colab import drive
drive.mount("/content/drive")

import librosa
trainPath="/content/drive/MyDrive/ses/UrbanSound8K/audio/fold1/14113-4-0-0.wav" # ses dosyasının tam yolunu içerir
audio_file_path=trainPath
librosa_audio_data,librosa_sample_rate=librosa.load(audio_file_path)

print(librosa_audio_data)

plt.figure(figsize=(12,4))
plt.plot(librosa_audio_data)
plt.show()

from IPython.display import Audio
Audio("/content/drive/MyDrive/ses/UrbanSound8K/audio/fold1/14113-4-0-0.wav")

mfccs=librosa.feature.mfcc(y=librosa_audio_data, sr=librosa_sample_rate, n_mfcc=40)

mfccs.shape

mfccs

!pip install resampy

# Veri seti dosya yolları ve etiketlerinin bulunduğu CSV dosyasının yolu
metadata_path = "/content/drive/MyDrive/ses/UrbanSound8K/metadata/UrbanSound8K.csv"

# Ses dosyalarının bulunduğu klasörün yolu
audio_dataset_path = "/content/drive/MyDrive/ses/UrbanSound8K/audio/"

# Metadata CSV dosyasını yükle
metadata = pd.read_csv(metadata_path)

def feature_extractor(file_path):
    audio, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
    mfccs_features = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)
    mfccs_scaled_features = np.mean(mfccs_features.T, axis=0)

    return mfccs_scaled_features

!pip install resampy

# Öznitelikleri depolamak için bir liste oluştur
extracted_features = []

# Her bir ses dosyası için özellik çıkarımı yap
for index, row in tqdm(metadata.iterrows()):
    file_name = os.path.join(audio_dataset_path, "fold" + str(row["fold"]), str(row["slice_file_name"]))
    final_class_labels = row["class"]
    data = feature_extractor(file_name)
    extracted_features.append([data, final_class_labels])

audio_dataset_path="/content/drive/MyDrive/ses/UrbanSound8K/audio/"
metadata= pd.read_csv("/content/drive/MyDrive/ses/UrbanSound8K/metadata/UrbanSound8K.csv")
metadata.head()

def feature_extractor(file_path):
    audio, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
    mfccs_features = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)
    mfccs_scaled_features = np.mean(mfccs_features.T, axis=0)

    return mfccs_scaled_features

for index_num, row in tqdm(metadata.iterrows()):
    file_name = os.path.join(os.path.abspath(audio_dataset_path), "fold" + str(row["fold"]), str(row["slice_file_name"]))
    extracted_features.append([data, final_class_labels])

extracted_features_df=pd.DataFrame(extracted_features,columns=["features","class"])
extracted_features_df.head()

extracted_features_df.tail()

x=np.array(extracted_features_df["features"].tolist())
y=np.array(extracted_features_df["class"].tolist())

x.shape

y

y.shape

labelencoder=LabelEncoder()
y=to_categorical(labelencoder.fit_transform(y))

y

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)

xtrain

num_labels=10

model=Sequential()
model.add(Dense(125,input_shape=(40,)))
model.add(Activation("relu"))
model.add(Dropout(0.5))



model.add(Dense(250))
model.add(Activation("relu"))
model.add(Dropout(0.5))


model.add(Dense(125))
model.add(Activation("relu"))
model.add(Dropout(0.5))



model.add(Dense(num_labels))
model.add(Activation("softmax"))

model.summary()

model.compile(loss="categorical_crossentropy", metrics=["accuracy"], optimizer="adam")

epochscount=300
num_batch_size=32

model.fit(xtrain,ytrain,batch_size=num_batch_size,epochs=epochscount,validation_data=(xtest,ytest),verbose=1)

validation_test_set_accuaracy=model.evaluate(xtest,ytest,verbose=0)
print(validation_test_set_accuaracy[1])

xtest[1]

filename="/content/drive/MyDrive/ses/UrbanSound8KO/fold7O/17009-2-0-6.wav"
sound_signal,sample_rate=librosa.load(filename,res_type="kaiser_fast")
mfcc_features=librosa.feature.mfcc(y=sound_signal,sr=sample_rate,n_mfcc=40)
mfccs_scaled_features=np.mean(mfcc_features.T,axis=0)

mfccs_scaled_features

mfccs_scaled_features=mfccs_scaled_features.reshape(1,-1)

mfccs_scaled_features.shape

result_array=model.predict(mfccs_scaled_features)

result_array

result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

result_classes

result=np.argmax(result_array[0])

result_classes[result]

import os
print(os.getcwd())

import matplotlib.image as mpimg

if result_classes[result]=='köpek havlaması':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='sondaj':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='korna':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='çocuk sesleri':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='klima':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
   imgplot=plt.imshow(img)
   plt.show()


if result_classes[result]=='motor sesi':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='silah sesi':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='darbeli kırıcı':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='siren':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpg')
   imgplot=plt.imshow(img)
   plt.show()

if result_classes[result]=='sokak müziği':
   import matplotlib.image as mpimg
   plt.figure(figsize=(12,4))
   img=mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
   imgplot=plt.imshow(img)
   plt.show()

from IPython.display import Audio
Audio(filename)

import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import librosa
import numpy as np

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold1O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold2O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()
# klimayı korna olarak çıkarttı

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold3O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold4O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold5O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold6O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold7O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold8O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold9O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

folder_path = "/content/drive/MyDrive/ses/UrbanSound8KO/fold10O/"
result_classes=["klima","korna","çocuk sesleri","köpek havlaması","sondaj","motor sesi","silah sesi","darbeli kırıcı","siren","sokak müziği"]

for file_name in os.listdir(folder_path):
    if file_name.endswith(".wav"):
        file_path = os.path.join(folder_path, file_name)
        sound_signal, sample_rate = librosa.load(file_path, res_type="kaiser_fast")
        mfcc_features = librosa.feature.mfcc(y=sound_signal, sr=sample_rate, n_mfcc=40)
        mfccs_scaled_features = np.mean(mfcc_features.T, axis=0)
        mfccs_scaled_features = mfccs_scaled_features.reshape(1,-1)
        result_array = model.predict(mfccs_scaled_features)

        result = np.argmax(result_array[0])
        predicted_class = result_classes[result]

        if predicted_class == 'köpek havlaması':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/dog.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'korna':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/horn.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'çocuk sesleri':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/children.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'klima':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/airconditioner.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sondaj':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/drill.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'motor sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/engine.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'silah sesi':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/gunshot.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'darbeli kırıcı':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/jackhammer.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'siren':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/siren.jpeg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()

        elif predicted_class == 'sokak müziği':
            plt.figure(figsize=(12,4))
            img = mpimg.imread('/content/drive/MyDrive/ses/resim/streetmusic.jpg')
            imgplot = plt.imshow(img)
            plt.title(predicted_class)
            plt.show()